rm(list=ls())
setwd("C:/Users/Iulian/Documents/GitHub/Iulian-Gramatki/coursework/Titanic")
library(dplyr)
A<-read.csv('train.csv')
Y<-A["Survived"]
X <- A
X <- X %>% mutate(Male = recode(Sex, 'male' = 1, 'female' = 0))
X <- X %>% rename(Male_label = Sex)
X <- as.matrix(X[c("Pclass","Age","SibSp","Parch","Fare","Male")])
beta <- t(t(rep(0.01,6)))
logit_ll <- function(b) { #negated logistic log-likelihood of a sample. Uses global X and Y
z <- X %*% b
L1 <- 1 / (1 + exp(-z)) #likelihood to have y=1
L0 <- 1 - L1 #likelihood to have y=0
L <- L1 * Y + L0 * (1-Y) #likelihood of observed y
l <- -sum(log(L), na.rm=TRUE) #log-likelihood of total sample
return(l)
}
MLE <- optim(par=beta,fn=logit_ll)
betahat <- MLE$par
logit_ll(betahat)
rm(list=ls())
setwd("C:/Users/Iulian/Documents/GitHub/Iulian-Gramatki/coursework/Titanic")
library(dplyr)
A<-read.csv('train.csv')
Y<-A["Survived"]
X <- A
X <- X %>% mutate(Male = recode(Sex, 'male' = 1, 'female' = 0))
X <- X %>% rename(Male_label = Sex)
X <- as.matrix(X[c("Pclass","Age","SibSp","Parch","Fare","Male")])
beta <- t(t(rep(0.01,6)))
logit_ll <- function(b) { #negated logistic log-likelihood of a sample. Uses global X and Y
z <- X %*% b
L1 <- 1 / (1 + exp(-z)) #likelihood to have y=1
L0 <- 1 - L1 #likelihood to have y=0
L <- L1 * Y + L0 * (1-Y) #likelihood of observed y
l <- -sum(log(L), na.rm=TRUE) #log-likelihood of total sample
return(l)
}
MLE <- optim(par=beta,fn=logit_ll)
betahat <- MLE$par
logit_ll(betahat)
tracer(logit_ll,L)
trace(logit_ll,L)
trace(logit_ll,exit=L)
debugSource('~/GitHub/Iulian-Gramatki/coursework/Titanic/titanic.r')
debugSource('~/GitHub/Iulian-Gramatki/coursework/Titanic/titanic.r')
rm(list=ls())
setwd("C:/Users/Iulian/Documents/GitHub/Iulian-Gramatki/coursework/Titanic")
library(dplyr)
A<-read.csv('train.csv')
Y<-A["Survived"]
X <- A
X <- X %>% mutate(Male = recode(Sex, 'male' = 1, 'female' = 0))
X <- X %>% rename(Male_label = Sex)
X <- as.matrix(X[c("Pclass","Age","SibSp","Parch","Fare","Male")])
beta <- t(t(rep(0.01,6)))
logit_ll <- function(b) { #negated logistic log-likelihood of a sample. Uses global X and Y
z <- X %*% b
L1 <- 1 / (1 + exp(-z)) #likelihood to have y=1
L0 <- 1 - L1 #likelihood to have y=0
L <- L1 * Y + L0 * (1-Y) #likelihood of observed y
l <- -sum(log(L), na.rm=TRUE) #log-likelihood of total sample
return(l)
}
MLE <- optim(par=beta,fn=logit_ll)
betahat <- MLE$par
rm(list=ls())
setwd("C:/Users/Iulian/Documents/GitHub/Iulian-Gramatki/coursework/Titanic")
library(dplyr)
A<-read.csv('train.csv')
Y<-A["Survived"]
X <- A
X <- X %>% mutate(Male = recode(Sex, 'male' = 1, 'female' = 0))
X <- X %>% rename(Male_label = Sex)
X <- as.matrix(X[c("Pclass","Age","SibSp","Parch","Fare","Male")])
beta <- t(t(rep(0.01,6)))
logit_ll <- function(b) { #negated logistic log-likelihood of a sample. Uses global X and Y
z <- X %*% b
L1 <- 1 / (1 + exp(-z)) #likelihood to have y=1
L0 <- 1 - L1 #likelihood to have y=0
L <- L1 * Y + L0 * (1-Y) #likelihood of observed y
l <- -sum(log(L), na.rm=TRUE) #log-likelihood of total sample
browser()
return(l)
}
MLE <- optim(par=beta,fn=logit_ll)
betahat <- MLE$par
logit_ll(betahat)
rm(list=ls())
setwd("C:/Users/Iulian/Documents/GitHub/Iulian-Gramatki/coursework/Titanic")
library(dplyr)
A<-read.csv('train.csv')
Y<-A["Survived"]
X <- A
X <- X %>% mutate(Male = recode(Sex, 'male' = 1, 'female' = 0))
X <- X %>% rename(Male_label = Sex)
X <- as.matrix(X[c("Pclass","Age","SibSp","Parch","Fare","Male")])
beta <- t(t(rep(0.01,6)))
logit_ll <- function(b) { #negated logistic log-likelihood of a sample. Uses global X and Y
z <- X %*% b
L1 <- 1 / (1 + exp(-z)) #likelihood to have y=1
L0 <- 1 - L1 #likelihood to have y=0
L <- L1 * Y + L0 * (1-Y) #likelihood of observed y
l <- -sum(log(L), na.rm=TRUE) #log-likelihood of total sample
if (exists(betahat)) browser()
return(l)
}
MLE <- optim(par=beta,fn=logit_ll)
betahat <- MLE$par
rm(list=ls())
setwd("C:/Users/Iulian/Documents/GitHub/Iulian-Gramatki/coursework/Titanic")
library(dplyr)
A<-read.csv('train.csv')
Y<-A["Survived"]
X <- A
X <- X %>% mutate(Male = recode(Sex, 'male' = 1, 'female' = 0))
X <- X %>% rename(Male_label = Sex)
X <- as.matrix(X[c("Pclass","Age","SibSp","Parch","Fare","Male")])
beta <- t(t(rep(0.01,6)))
logit_ll <- function(b) { #negated logistic log-likelihood of a sample. Uses global X and Y
z <- X %*% b
L1 <- 1 / (1 + exp(-z)) #likelihood to have y=1
L0 <- 1 - L1 #likelihood to have y=0
L <- L1 * Y + L0 * (1-Y) #likelihood of observed y
l <- -sum(log(L), na.rm=TRUE) #log-likelihood of total sample
if (b>0.01) browser()
return(l)
}
MLE <- optim(par=beta,fn=logit_ll)
betahat <- MLE$par
!is.null(betahat)
exists(betahat)
exists("betahat")
rm(list=ls())
setwd("C:/Users/Iulian/Documents/GitHub/Iulian-Gramatki/coursework/Titanic")
library(dplyr)
A<-read.csv('train.csv')
Y<-A["Survived"]
X <- A
X <- X %>% mutate(Male = recode(Sex, 'male' = 1, 'female' = 0))
X <- X %>% rename(Male_label = Sex)
X <- as.matrix(X[c("Pclass","Age","SibSp","Parch","Fare","Male")])
beta <- t(t(rep(0.01,6)))
logit_ll <- function(b) { #negated logistic log-likelihood of a sample. Uses global X and Y
z <- X %*% b
L1 <- 1 / (1 + exp(-z)) #likelihood to have y=1
L0 <- 1 - L1 #likelihood to have y=0
L <- L1 * Y + L0 * (1-Y) #likelihood of observed y
l <- -sum(log(L), na.rm=TRUE) #log-likelihood of total sample
if (exists('betahat')) browser()
return(l)
}
MLE <- optim(par=beta,fn=logit_ll)
betahat <- MLE$par
logit_ll(betahat)
rm(list=ls())
setwd("C:/Users/Iulian/Documents/GitHub/Iulian-Gramatki/coursework/Titanic")
library(dplyr)
A<-read.csv('train.csv')
Y<-A["Survived"]
X <- A
X <- X %>% mutate(Male = recode(Sex, 'male' = 1, 'female' = 0))
X <- X %>% rename(Male_label = Sex)
X <- as.matrix(X[c("Pclass","Age","SibSp","Parch","Fare","Male")])
beta <- t(t(rep(0.01,6)))
logit_ll <- function(b) { #negated logistic log-likelihood of a sample. Uses global X and Y
z <- X %*% b
L1 <- 1 / (1 + exp(-z)) #likelihood to have y=1
L0 <- 1 - L1 #likelihood to have y=0
L <- L1 * Y + L0 * (1-Y) #likelihood of observed y
l <- -sum(log(L), na.rm=TRUE) #log-likelihood of total sample
if (exists('betahat')) browser() #debugging command
return(l)
}
MLE <- optim(par=beta,fn=logit_ll)
betahat <- MLE$par
predict <- function(b) { #predict outcomes based on estimated coefficients
zhat <<- X %*% b
Lhat <<- 1 / (1 + exp(-zhat))
Yhat <<- Lhat >= 0.5
}
predict(betahat)
predict <- function(b) { #predict outcomes based on estimated coefficients
zhat <<- X %*% b
Lhat <<- 1 / (1 + exp(-zhat))
Yhat <<- as.integer(Lhat >= 0.5)
}
predict(betahat)
rm(list=ls())
setwd("C:/Users/Iulian/Documents/GitHub/Iulian-Gramatki/coursework/Titanic")
library(dplyr)
A<-read.csv('train.csv')
Y<-A["Survived"]
X <- A
X <- X %>% mutate(Male = recode(Sex, 'male' = 1, 'female' = 0))
X <- X %>% rename(Male_label = Sex)
X <- as.matrix(X[c("Pclass","Age","SibSp","Parch","Fare","Male")])
beta <- t(t(rep(0.01,6)))
logit_ll <- function(b) { #negated logistic log-likelihood of a sample. Uses global X and Y
z <- X %*% b
L1 <- 1 / (1 + exp(-z)) #likelihood to have y=1
L0 <- 1 - L1 #likelihood to have y=0
L <- L1 * Y + L0 * (1-Y) #likelihood of observed y
l <- -sum(log(L), na.rm=TRUE) #log-likelihood of total sample
if (exists('betahat')) browser() #debugging command
return(l)
}
MLE <- optim(par=beta,fn=logit_ll)
betahat <- MLE$par
predict <- function(b) { #predict outcomes based on estimated coefficients
zhat <<- X %*% b
Lhat <<- 1 / (1 + exp(-zhat))
Yhat <<- as.integer(Lhat >= 0.5)
accuracy <<- sum(Y==Yhat)
}
predict(betahat)
rm(list=ls())
setwd("C:/Users/Iulian/Documents/GitHub/Iulian-Gramatki/coursework/Titanic")
library(dplyr)
A<-read.csv('train.csv')
Y<-A["Survived"]
X <- A
X <- X %>% mutate(Male = recode(Sex, 'male' = 1, 'female' = 0))
X <- X %>% rename(Male_label = Sex)
X <- as.matrix(X[c("Pclass","Age","SibSp","Parch","Fare","Male")])
beta <- t(t(rep(0.01,6)))
logit_ll <- function(b) { #negated logistic log-likelihood of a sample. Uses global X and Y
z <- X %*% b
L1 <- 1 / (1 + exp(-z)) #likelihood to have y=1
L0 <- 1 - L1 #likelihood to have y=0
L <- L1 * Y + L0 * (1-Y) #likelihood of observed y
l <- -sum(log(L), na.rm=TRUE) #log-likelihood of total sample
if (exists('betahat')) browser() #debugging command
return(l)
}
MLE <- optim(par=beta,fn=logit_ll)
betahat <- MLE$par
predict <- function(b) { #predict outcomes based on estimated coefficients
zhat <<- X %*% b
Lhat <<- 1 / (1 + exp(-zhat))
Yhat <<- as.integer(Lhat >= 0.5)
accuracy <<- sum(Y==Yhat, na.rm==TRUE) / length(Y)
}
predict(betahat)
rm(list=ls())
setwd("C:/Users/Iulian/Documents/GitHub/Iulian-Gramatki/coursework/Titanic")
library(dplyr)
A<-read.csv('train.csv')
Y<-A["Survived"]
X <- A
X <- X %>% mutate(Male = recode(Sex, 'male' = 1, 'female' = 0))
X <- X %>% rename(Male_label = Sex)
X <- as.matrix(X[c("Pclass","Age","SibSp","Parch","Fare","Male")])
beta <- t(t(rep(0.01,6)))
logit_ll <- function(b) { #negated logistic log-likelihood of a sample. Uses global X and Y
z <- X %*% b
L1 <- 1 / (1 + exp(-z)) #likelihood to have y=1
L0 <- 1 - L1 #likelihood to have y=0
L <- L1 * Y + L0 * (1-Y) #likelihood of observed y
l <- -sum(log(L), na.rm=TRUE) #log-likelihood of total sample
if (exists('betahat')) browser() #debugging command
return(l)
}
MLE <- optim(par=beta,fn=logit_ll)
betahat <- MLE$par
predict <- function(b) { #predict outcomes based on estimated coefficients
zhat <<- X %*% b
Lhat <<- 1 / (1 + exp(-zhat))
Yhat <<- as.integer(Lhat >= 0.5)
accuracy <<- sum(Y==Yhat, na.rm=TRUE) / length(Y)
}
predict(betahat)
sum(Y==Yhat, na.rm=TRUE)
length(Y)
rm(list=ls())
setwd("C:/Users/Iulian/Documents/GitHub/Iulian-Gramatki/coursework/Titanic")
library(dplyr)
A<-read.csv('train.csv')
Y<-A["Survived"]
X <- A
X <- X %>% mutate(Male = recode(Sex, 'male' = 1, 'female' = 0))
X <- X %>% rename(Male_label = Sex)
X <- as.matrix(X[c("Pclass","Age","SibSp","Parch","Fare","Male")])
beta <- t(t(rep(0.01,6)))
logit_ll <- function(b) { #negated logistic log-likelihood of a sample. Uses global X and Y
z <- X %*% b
L1 <- 1 / (1 + exp(-z)) #likelihood to have y=1
L0 <- 1 - L1 #likelihood to have y=0
L <- L1 * Y + L0 * (1-Y) #likelihood of observed y
l <- -sum(log(L), na.rm=TRUE) #log-likelihood of total sample
if (exists('betahat')) browser() #debugging command
return(l)
}
MLE <- optim(par=beta,fn=logit_ll)
betahat <- MLE$par
predict <- function(X,b) { #predict outcomes based on estimated coefficients
zhat <<- X %*% b
Lhat <<- 1 / (1 + exp(-zhat))
Yhat <<- as.integer(Lhat >= 0.5)
accuracy <<- sum(Y==Yhat, na.rm=TRUE) / length(Y)
return(Yhat)
}
Yhat <- predict(X,betahat)
rm(list=ls())
setwd("C:/Users/Iulian/Documents/GitHub/Iulian-Gramatki/coursework/Titanic")
library(dplyr)
A<-read.csv('train.csv')
Y<-A["Survived"]
X <- A
X <- X %>% mutate(Male = recode(Sex, 'male' = 1, 'female' = 0))
X <- X %>% rename(Male_label = Sex)
X <- as.matrix(X[c("Pclass","Age","SibSp","Parch","Fare","Male")])
beta <- t(t(rep(0.01,6)))
logit_ll <- function(b) { #negated logistic log-likelihood of a sample. Uses global X and Y
z <- X %*% b
L1 <- 1 / (1 + exp(-z)) #likelihood to have y=1
L0 <- 1 - L1 #likelihood to have y=0
L <- L1 * Y + L0 * (1-Y) #likelihood of observed y
l <- -sum(log(L), na.rm=TRUE) #log-likelihood of total sample
if (exists('betahat')) browser() #debugging command
return(l)
}
MLE <- optim(par=beta,fn=logit_ll)
betahat <- MLE$par
predict <- function(X,b) { #predict outcomes based on estimated coefficients
zhat <<- X %*% b
Lhat <<- 1 / (1 + exp(-zhat))
Yhat <<- as.integer(Lhat >= 0.5)
accuracy <<- sum(Y==Yhat, na.rm=TRUE) / length(Y)
return(Yhat)
}
Yp <- predict(X,betahat)
rm(list=ls())
setwd("C:/Users/Iulian/Documents/GitHub/Iulian-Gramatki/coursework/Titanic")
library(dplyr)
A<-read.csv('train.csv')
Y<-A["Survived"]
X <- A
X <- X %>% mutate(Male = recode(Sex, 'male' = 1, 'female' = 0))
X <- X %>% rename(Male_label = Sex)
X <- as.matrix(X[c("Pclass","Age","SibSp","Parch","Fare","Male")])
beta <- t(t(rep(0.01,6)))
logit_ll <- function(b) { #negated logistic log-likelihood of a sample. Uses global X and Y
z <- X %*% b
L1 <- 1 / (1 + exp(-z)) #likelihood to have y=1
L0 <- 1 - L1 #likelihood to have y=0
L <- L1 * Y + L0 * (1-Y) #likelihood of observed y
l <- -sum(log(L), na.rm=TRUE) #log-likelihood of total sample
if (exists('betahat')) browser() #debugging command
return(l)
}
MLE <- optim(par=beta,fn=logit_ll)
betahat <- MLE$par
predict <- function(X,b) { #predict outcomes based on estimated coefficients
zhat <<- X %*% b
Lhat <<- 1 / (1 + exp(-zhat))
Yhat <<- as.numeric(Lhat >= 0.5)
accuracy <<- sum(Y==Yhat, na.rm=TRUE) / length(Y)
return(Yhat)
}
Yhat <- predict(X,betahat)
rm(list=ls())
setwd("C:/Users/Iulian/Documents/GitHub/Iulian-Gramatki/coursework/Titanic")
library(dplyr)
A<-read.csv('train.csv')
Y<-A["Survived"]
X <- A
X <- X %>% mutate(Male = recode(Sex, 'male' = 1, 'female' = 0))
X <- X %>% rename(Male_label = Sex)
X <- as.matrix(X[c("Pclass","Age","SibSp","Parch","Fare","Male")])
beta <- t(t(rep(0.01,6)))
logit_ll <- function(b) { #negated logistic log-likelihood of a sample. Uses global X and Y
z <- X %*% b
L1 <- 1 / (1 + exp(-z)) #likelihood to have y=1
L0 <- 1 - L1 #likelihood to have y=0
L <- L1 * Y + L0 * (1-Y) #likelihood of observed y
l <- -sum(log(L), na.rm=TRUE) #log-likelihood of total sample
if (exists('betahat')) browser() #debugging command
return(l)
}
MLE <- optim(par=beta,fn=logit_ll)
betahat <- MLE$par
predict <- function(X,b) { #predict outcomes based on estimated coefficients
zhat <<- X %*% b
Lhat <<- 1 / (1 + exp(-zhat))
Yhat <<- as.numeric(Lhat >= 0.5)
accuracy <<- sum(Y==Yhat, na.rm=TRUE) / length(Y)
#  return(Yhat)
}
Yhat <- predict(X,betahat)
rm(list=ls())
setwd("C:/Users/Iulian/Documents/GitHub/Iulian-Gramatki/coursework/Titanic")
library(dplyr)
A<-read.csv('train.csv')
Y<-A["Survived"]
X <- A
X <- X %>% mutate(Male = recode(Sex, 'male' = 1, 'female' = 0))
X <- X %>% rename(Male_label = Sex)
X <- as.matrix(X[c("Pclass","Age","SibSp","Parch","Fare","Male")])
beta <- t(t(rep(0.01,6)))
logit_ll <- function(b) { #negated logistic log-likelihood of a sample. Uses global X and Y
z <- X %*% b
L1 <- 1 / (1 + exp(-z)) #likelihood to have y=1
L0 <- 1 - L1 #likelihood to have y=0
L <- L1 * Y + L0 * (1-Y) #likelihood of observed y
l <- -sum(log(L), na.rm=TRUE) #log-likelihood of total sample
if (exists('betahat')) browser() #debugging command
return(l)
}
MLE <- optim(par=beta,fn=logit_ll)
betahat <- MLE$par
predict <- function(X,b) { #predict outcomes based on estimated coefficients
zhat <<- X %*% b
Lhat <<- 1 / (1 + exp(-zhat))
Yhat <<- as.numeric(Lhat >= 0.5)
accuracy <<- sum(Y==Yhat, na.rm=TRUE) / length(Y)
#  return(Yhat)
}
#Yhat <- predict(X,betahat)
rm(list=ls())
setwd("C:/Users/Iulian/Documents/GitHub/Iulian-Gramatki/coursework/Titanic")
library(dplyr)
A<-read.csv('train.csv')
Y<-A["Survived"]
X <- A
X <- X %>% mutate(Male = recode(Sex, 'male' = 1, 'female' = 0))
X <- X %>% rename(Male_label = Sex)
X <- as.matrix(X[c("Pclass","Age","SibSp","Parch","Fare","Male")])
beta <- t(t(rep(0.01,6)))
logit_ll <- function(b) { #negated logistic log-likelihood of a sample. Uses global X and Y
z <- X %*% b
L1 <- 1 / (1 + exp(-z)) #likelihood to have y=1
L0 <- 1 - L1 #likelihood to have y=0
L <- L1 * Y + L0 * (1-Y) #likelihood of observed y
l <- -sum(log(L), na.rm=TRUE) #log-likelihood of total sample
if (exists('betahat')) browser() #debugging command
return(l)
}
MLE <- optim(par=beta,fn=logit_ll)
betahat <- MLE$par
predict <- function(X,b) { #predict outcomes based on estimated coefficients
zhat <<- X %*% b
Lhat <<- 1 / (1 + exp(-zhat))
Yhat <<- as.numeric(Lhat >= 0.5)
accuracy <<- sum(Y==Yhat, na.rm=TRUE) / length(Y)
#  return(Yhat)
}
predict(X,betahat)
rm(list=ls())
setwd("C:/Users/Iulian/Documents/GitHub/Iulian-Gramatki/coursework/Titanic")
library(dplyr)
A<-read.csv('train.csv')
Y<-A["Survived"]
X <- A
X <- X %>% mutate(Male = recode(Sex, 'male' = 1, 'female' = 0))
X <- X %>% rename(Male_label = Sex)
X <- as.matrix(X[c("Pclass","Age","SibSp","Parch","Fare","Male")])
beta <- t(t(rep(0.01,6)))
logit_ll <- function(b) { #negated logistic log-likelihood of a sample. Uses global X and Y
z <- X %*% b
L1 <- 1 / (1 + exp(-z)) #likelihood to have y=1
L0 <- 1 - L1 #likelihood to have y=0
L <- L1 * Y + L0 * (1-Y) #likelihood of observed y
l <- -sum(log(L), na.rm=TRUE) #log-likelihood of total sample
if (exists('betahat')) browser() #debugging command
return(l)
}
MLE <- optim(par=beta,fn=logit_ll)
betahat <- MLE$par
predict <- function(X,b) { #predict outcomes based on estimated coefficients
zhat <<- X %*% b
Lhat <<- 1 / (1 + exp(-zhat))
Yhat <<- Lhat >= 0.5
accuracy <<- sum(Y==Yhat, na.rm=TRUE) / length(Y)
#  return(Yhat)
}
predict(X,betahat)
accuracy <<- sum(Y==Yhat, na.rm=TRUE) / length(Y)
length(Y)
attributes(Y)
nrow(Y)
View(Yhat)
rm(list=ls())
setwd("C:/Users/Iulian/Documents/GitHub/Iulian-Gramatki/coursework/Titanic")
library(dplyr)
A<-read.csv('train.csv')
Y<-A["Survived"]
X <- A
X <- X %>% mutate(Male = recode(Sex, 'male' = 1, 'female' = 0))
X <- X %>% rename(Male_label = Sex)
X <- as.matrix(X[c("Pclass","Age","SibSp","Parch","Fare","Male")])
beta <- t(t(rep(0.01,6)))
logit_ll <- function(b) { #negated logistic log-likelihood of a sample. Uses global X and Y
z <- X %*% b
L1 <- 1 / (1 + exp(-z)) #likelihood to have y=1
L0 <- 1 - L1 #likelihood to have y=0
L <- L1 * Y + L0 * (1-Y) #likelihood of observed y
l <- -sum(log(L), na.rm=TRUE) #log-likelihood of total sample
if (exists('betahat')) browser() #debugging command
return(l)
}
MLE <- optim(par=beta,fn=logit_ll)
betahat <- MLE$par
predict <- function(X,b) { #predict outcomes based on estimated coefficients
zhat <<- X %*% b
Lhat <<- 1 / (1 + exp(-zhat))
Yhat <<- Lhat >= 0.5
accuracy <<- sum(Y==Yhat, na.rm=TRUE) / nrow(Y)
#  return(Yhat)
}
predict(X,betahat)
